{% extends "layouts/base.html" %}
{% block title %} Home {% endblock %}
{% load static %}
{% block content %}



<script src="https://ofrohn.github.io/lib/d3.min.js"></script>
<script src="https://ofrohn.github.io/lib/d3.geo.projection.min.js"></script>
<script src="https://ofrohn.github.io/celestial.min.js"></script>
<link rel="stylesheet" href="https://ofrohn.github.io/celestial.css">
<script src="https://code.jquery.com/jquery-3.6.3.min.js"></script>

<div class="container">
  <span id="utc"> </span><br>
  <span id="mjd">&nbsp;</span></b>

<!-- {{ message }} -->

        <div class="row mt-4">
            <div class="col-12  mb-4">
                <div class="card border-0 shadow h-100">
                    <div class="card-body">
                        <div class="row d-block d-xl-flex">
                            <div class="col-11  px-xl-1">
                                <div class="d-flex flex-row ms-2">
                                    <div class="flex-shrink-1">
                                        <h2 class="h3 fw-extrabold mb-0">News</h2>
                                        <small class="text-gray-500">
						{{ news }}
                                        </small>
                                    </div>
				</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div style="overflow:hidden;margin:0 auto;">
          <div id="celestial-map">
          </div>
        </div>

</div>

<script type="text/javascript">

// Some prettifying styles
var config = {
//  container: "celestial-map", 
  projection: "aitoff",
  transform: "galactic",
  background: { fill: "#000", stroke: "#000", opacity: 0.9, width: 1 },
  datapath: "https://ofrohn.github.io/data/",
  stars: {
    colors: false,
    names: false,
    style: { fill: "#aaa", opacity:1 },
    limit: 4,
    size: 5
  },
  constellations: {
    names: false,      // Show constellation names 
    namesType: "iau", // Type of name Latin (iau, default), 3 letter designation (desig) or other language (see list below)
    nameStyle: { fill:"#cccc99", align: "center", baseline: "middle", 
                 font: ["14px Helvetica, Arial, sans-serif",  // Style for constellations
                        "12px Helvetica, Arial, sans-serif",  // Different fonts for diff.
                        "11px Helvetica, Arial, sans-serif"]},// ranked constellations
    lines: true,   // Show constellation lines, style below
    lineStyle: { stroke: "#cccccc", width: 0.5, opacity: 0.6 }, 
    bounds: false, // Show constellation boundaries, style below
    boundStyle: { stroke: "#cccc00", width: 0.5, opacity: 0.8, dash: [2, 4] }
  },  
  planets: {  //Show planet locations, if date-time is set
    show: true,
    which: ["sol", "lun"],
    symbolType: "disk",
    symbolStyle: { fill: "#00ccff"},
    names: true
  },
  dsos: { show: false, size: 10 },
  mw: {
    style: { fill:"#999", opacity: 0.3 }
  },
  lines: {
    graticule: { show: true, stroke: "#cccccc", width: 0.6, opacity: 0.5,      // Show graticule lines 
    // grid values: "outline", "center", or [lat,...] specific position
    lon: {pos: ["center"], fill: "#eee", font: "14px Helvetica, Arial, sans-serif"}, 
    // grid values: "outline", "center", or [lon,...] specific position
    lat: {pos: ["center"], fill: "#eee", font: "14px Helvetica, Arial, sans-serif"}},
  },
  equatorial: { show: false},
  ecliptic: { show: false},
  galactic: { show: false},
  supergalactic: { show: false}
};

// Asterisms canvas style properties for lines and text
var pointStyle = {
      stroke: "rgba(255, 0, 204, 1)",
      fill: "rgba(255, 0, 204, 0.15)"
    },
    textStyle = {
      fill:"rgba(255, 0, 204, 1)",
      font: "normal bold 15px Helvetica, Arial, sans-serif",
      align: "left",
      baseline: "bottom"
    };

var jsonAsts = {
  "type":"FeatureCollection",
  // this is an array, add as many objects as you want
  "features":[
    {"type":"Feature",
     "id":"SomeDesignator",
     "properties": {
       // Name
       "name":"Some Name",
       // magnitude, dimension in arcseconds or any other size criterion
       "mag": 10,
       "dim": 30
     }, "geometry":{
       // the location of the object as a [ra, dec] array in degrees [-180..180, -90..90]
       "type":"Point",
       "coordinates": [-80.7653, 38.7837]
     }
    }
  ]};

// the Summer Triangle between Vega, Deneb and Altair
var jsonLine = {
  "type":"FeatureCollection",
  // this is an array, add as many objects as you want
  "features":[
    {"type":"Feature",
     "id":"SummerTriangle",
     "properties": {
       // Name
       "n":"Summer Triangle",
       // Location of name text on the map
       "loc": [-67.5, 52]
     }, "geometry":{
       // the line object as an array of point coordinates
       "type":"MultiLineString",
       "coordinates":[[
         [-80.7653, 38.7837],
         [-62.3042, 8.8683],
         [-49.642, 45.2803],
         [-80.7653, 38.7837]
       ]]
     }
    }
  ]};

Celestial.add({
  type:"line",

  callback: function(error, json) {
    if (error) return console.warn(error);
    // Load the geoJSON file and transform to correct coordinate system, if necessary
    var asterism = Celestial.getData(jsonLine, config.transform);
	  console.log(asterism.features);

    // Add to celestial objects container in d3
    Celestial.container.selectAll(".asterisms")
      .data(asterism.features) .enter() .append("path") .attr("class", "ast");

console.log('made container');
    // Trigger redraw to display changes
    Celestial.redraw();
  },

  redraw: function() {
console.log('redraw');
    // Select the added objects by class name as given previously
    Celestial.container.selectAll(".ast").each(function(d) {
      // If point is visible (this doesn't work automatically for points)
  //    if (Celestial.clip(d.geometry.coordinates)) {
        // get point coordinates
 //       var pt = Celestial.mapProjection(d.geometry.coordinates);
        // object radius in pixel, could be varable depending on e.g. magnitude
//        var r = Math.pow(parseInt(d.properties.dim) * 0.25, 0.5);

        // draw on canvas
        // Set object styles
        Celestial.setStyle(lineStyle);
        // Start the drawing path
	      Celestial.map(d);

 //       Celestial.context.beginPath();
        // Thats a circle in html5 canvas
  //      Celestial.context.arc(pt[0], pt[1], r, 0, 2 * Math.PI);
        // Finish the drawing path
   //     Celestial.context.closePath();
        // Draw a line along the path with the prevoiusly set stroke color and line width
        Celestial.context.stroke();
        // Fill the object path with the prevoiusly set fill color
        Celestial.context.fill();
   //   }
    });
  }
});

Celestial.display(config);

$(document).ready(
  function() {
    setInterval(function() {
      // Update time and MJD data
      var h = new Date();
      var hst = h + '';
      var u = h.getTime();
      var m = (u / 86400000 + 40587);               // ms since epoch
      var nns = [];
      // loopify this using $sitedata
      nns['01'] = parseInt(m + 0.501 - 10/24);           // MLO
      nns['02'] = parseInt(m + 0.501 - 10/24);           // HKO
      nns['03'] = parseInt(m + 0.501 + 1/24);            // STH
      nns['04'] = parseInt(m + 0.501 - 5/24);            // CHL
      var utc = h.toUTCString();
      document.getElementById("utc").innerHTML = utc;
      document.getElementById("mjd").innerHTML = "MJD " + m.toFixed(5);
    }, 1000)
  }
);

  </script>

{% endblock %}
